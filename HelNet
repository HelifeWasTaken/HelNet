#pragma once

#include <boost/asio/io_service.hpp>
#include <boost/asio/buffer.hpp>
#include <boost/asio/ip/tcp.hpp>
#include <boost/asio/ip/udp.hpp>

#include <boost/endian/conversion.hpp>
#include <boost/system/error_code.hpp>

#include <spdlog/spdlog.h>
#include <hl/silva/collections/threads/basic_pool_async.hpp>

namespace hl
{
namespace net
{
    class Error : public std::exception
    {
    private:
        std::string m_error;

    public:
        Error(const std::string &error)
            : m_error(error)
        {}

        const char *what() const noexcept override
        {
            return m_error.c_str();
        }
    };

    using byte = uint8_t;

    using buffer_t = std::array<byte, 1024>;
    using shared_buffer_t = std::shared_ptr<buffer_t>;

    static inline shared_buffer_t make_shared_buffer()
    {
        return std::make_shared<buffer_t>();
    }

    static inline shared_buffer_t make_shared_buffer(const byte *data, size_t size)
    {
        auto shared_buffer = make_shared_buffer();
        std::copy(data, data + std::min(size, shared_buffer->size()), shared_buffer->begin());
        return shared_buffer;
    }

    static inline shared_buffer_t make_shared_buffer(const shared_buffer_t &data)
    {
        return std::make_shared<buffer_t>(*data);
    }

    static inline shared_buffer_t make_shared_buffer(const buffer_t &data)
    {
        return std::make_shared<buffer_t>(data);
    }

    class base_abstract_client_unwrapped;

    using client_on_connect_callback            = std::function<void(base_abstract_client_unwrapped& client)>;
    using client_on_connect_error_callback      = std::function<void(base_abstract_client_unwrapped& client, const boost::system::error_code& ec)>;

    using client_on_disconnect_callback         = std::function<void(base_abstract_client_unwrapped& client)>;

    // on_receive_* sends a copy of the buffer
    using client_on_receive_callback            = std::function<void(base_abstract_client_unwrapped& client, buffer_t& buffer_copy, const size_t& recv_bytes)>;
    using client_on_receive_error_callback      = std::function<void(base_abstract_client_unwrapped& client, buffer_t& buffer_copy, const boost::system::error_code& ec, const size_t& recv_bytes)>;

    // The buffer used in on_send_* is the same buffer that is sent
    // This means that the buffer is not copied but sent as a reference
    // Please keep this in mind
    using client_on_send_callback               = std::function<bool(base_abstract_client_unwrapped& client, buffer_t& buffer_copy, const size_t& size)>;
    using client_on_send_error_callback         = std::function<void(base_abstract_client_unwrapped& client, const buffer_t& buffer_copy, const boost::system::error_code& ec, const size_t& sent_bytes)>;
    using client_on_send_success_callback       = std::function<void(base_abstract_client_unwrapped& client, const buffer_t& buffer_copy, const size_t& sent_bytes)>;

    using shared_base_abstract_client_unwrapped = std::shared_ptr<base_abstract_client_unwrapped>;

    // base client class
    class base_abstract_client_unwrapped : public std::enable_shared_from_this<base_abstract_client_unwrapped>
    {
    protected:
        // callbacks
        client_on_connect_callback m_on_connect;
        client_on_connect_error_callback m_on_connect_error;

        client_on_disconnect_callback m_on_disconnect;

        client_on_receive_callback m_on_receive;
        client_on_receive_error_callback m_on_receive_error;

        client_on_send_callback m_on_send;
        client_on_send_error_callback m_on_send_error;
        client_on_send_success_callback m_on_send_success;

        // callback thread pool
        hl::silva::collections::threads::basic_pool_async m_callback_thread_pool;

        // connection status
        std::atomic_bool m_connected;
        std::atomic_bool m_healthy;

    private:
        shared_buffer_t m_receive_buffer;

        mutable std::mutex m_alias_mutex;
        std::string m_alias;

    public:
        base_abstract_client_unwrapped()
            : m_on_connect(nullptr)
            , m_on_connect_error(nullptr)
            , m_on_disconnect(nullptr)
            , m_on_receive(nullptr)
            , m_on_receive_error(nullptr)
            , m_on_send(nullptr)
            , m_on_send_error(nullptr)
            , m_on_send_success(nullptr)
            , m_callback_thread_pool()
            , m_connected(false)
            , m_healthy(false)
            , m_receive_buffer(make_shared_buffer())
            , m_alias_mutex()
            , m_alias(fmt::format("{}", static_cast<void *>(this)))
        {}

        virtual ~base_abstract_client_unwrapped() = default;

        const std::string get_alias() const
        {
            std::lock_guard<std::mutex> lock(m_alias_mutex);
            return std::string(m_alias);
        }

        void set_alias(const std::string &alias)
        {
            const std::string alias_copy = get_alias();
            std::lock_guard<std::mutex> lock(m_alias_mutex);
            SPDLOG_INFO("Set alias for client: {} to: {}", alias_copy, alias);
            m_alias = alias;
        }

        void set_on_connect(const client_on_connect_callback &callback)
        {
            m_on_connect = callback;
            SPDLOG_INFO("Set on_connect callback for client: {} with callback: {}", get_alias(), fmt::ptr(&callback));
        }

        void set_on_connect_error(const client_on_connect_error_callback &callback)
        {
            m_on_connect_error = callback;
            SPDLOG_INFO("Set on_connect_error callback for client: {} with callback: {}", get_alias(), fmt::ptr(&callback));
        }

        void set_on_disconnect(const client_on_disconnect_callback &callback)
        {
            m_on_disconnect = callback;
            SPDLOG_INFO("Set on_disconnect callback for client: {} with callback: {}", get_alias(), fmt::ptr(&callback));
        }

        void set_on_receive(const client_on_receive_callback &callback)
        {
            m_on_receive = callback;
            SPDLOG_INFO("Set on_receive callback for client: {} with callback: {}", get_alias(), fmt::ptr(&callback));
        }

        void set_on_receive_error(const client_on_receive_error_callback &callback)
        {
            m_on_receive_error = callback;
            SPDLOG_INFO("Set on_receive_error callback for client: {} with callback: {}", get_alias(), fmt::ptr(&callback));
        }

        void set_on_send(const client_on_send_callback &callback)
        {
            m_on_send = callback;
            SPDLOG_INFO("Set on_send callback for client: {} with callback: {}", get_alias(), fmt::ptr(&callback));
        }

        void set_on_send_error(const client_on_send_error_callback &callback)
        {
            m_on_send_error = callback;
            SPDLOG_INFO("Set on_send_error callback for client: {} with callback: {}", get_alias(), fmt::ptr(&callback));
        }

        void set_on_send_success(const client_on_send_success_callback &callback)
        {
            m_on_send_success = callback;
            SPDLOG_INFO("Set on_send_success callback for client: {} with callback: {}", get_alias(), fmt::ptr(&callback));
        }

    public:
        bool connected() const
        {
            return m_connected;
        }

        bool healthy() const
        {
            return m_healthy && m_connected;
        }

        shared_buffer_t &receive_buffer()
        {
            return m_receive_buffer;
        }

        const shared_buffer_t &receive_buffer() const
        {
            return m_receive_buffer;
        }

        shared_base_abstract_client_unwrapped as_shared()
        {
            return shared_from_this();
        }

        bool callbacks_are_non_null()
        {
            return m_on_connect &&
                m_on_connect_error &&
                m_on_disconnect &&
                m_on_receive &&
                m_on_receive_error &&
                m_on_send &&
                m_on_send_error &&
                m_on_send_success;
        }

        virtual bool connect(const std::string &host, const std::string &port) = 0;
        virtual bool disconnect() = 0;
        virtual bool send(shared_buffer_t &buffer, const size_t &size) = 0;

        bool send(shared_buffer_t &buffer)
        {
            return send(buffer, buffer->size());
        }

        bool send_bytes(const void *data, const size_t &size)
        {
            auto shared_buffer = make_shared_buffer();
            std::copy(static_cast<const byte *>(data), static_cast<const byte *>(data) + std::min(size, shared_buffer->size()), shared_buffer->begin());
            return send(shared_buffer, size);
        }

        bool send_string(const std::string &str)
        {
            return send_bytes(static_cast<const void *>(str.c_str()), str.size());
        }

        template<typename T>
        bool send_vec(const std::vector<T> &data)
        {
            return send_bytes(static_cast<const void *>(data.data()), data.size() * sizeof(T));
        }

        template<typename T>
        bool send_vec(const std::vector<T> &data, const size_t& size)
        {
            return send_bytes(static_cast<const void *>(data.data()), std::min(size, data.size()) * sizeof(T));
        }
    };

    template<class Protocol>
    class base_client_unwrapped : public base_abstract_client_unwrapped
    {
    public:
        using shared_t = std::shared_ptr<base_client_unwrapped<Protocol>>;

        struct connection_data 
        {
            boost::asio::io_service m_io_service;
            std::thread m_io_service_thread;

            typename Protocol::resolver m_resolver;
            typename Protocol::resolver::iterator m_endpoint_iterator;
            typename Protocol::socket m_socket;

            connection_data(const std::string &host, const std::string &port)
                : m_io_service()
                , m_io_service_thread()
                , m_resolver(m_io_service)
                , m_endpoint_iterator(m_resolver.resolve({ host, port }))
                , m_socket(m_io_service)
            {
            }

            ~connection_data() = default;
        };

    private:
        using base_abstract_client_unwrapped::m_on_connect;
        using base_abstract_client_unwrapped::m_on_connect_error;
        using base_abstract_client_unwrapped::m_on_disconnect;
        using base_abstract_client_unwrapped::m_on_receive;
        using base_abstract_client_unwrapped::m_on_receive_error;
        using base_abstract_client_unwrapped::m_on_send;
        using base_abstract_client_unwrapped::m_on_send_error;
        using base_abstract_client_unwrapped::m_on_send_success;

    private:

        std::unique_ptr<connection_data> m_connection_data = nullptr;

        void _start_reading()
        {
            if (!healthy())
            {
                SPDLOG_WARN("Client is not healthy: {} may be either disconnected or received a non-recoverable error", get_alias());
                return;
            }

            auto client = this->as_shared();
            auto recv_buffer = this->receive_buffer();

            SPDLOG_INFO("Start reading for client: {}", get_alias());
            m_connection_data->m_socket.async_receive(
                boost::asio::buffer(*recv_buffer),
                [this, client, recv_buffer](const boost::system::error_code &ec, size_t bytes_transferred)
                {
                    auto buffer_cpy = make_shared_buffer(recv_buffer);

                    SPDLOG_INFO("Received {} bytes for client: {}", bytes_transferred, get_alias());

                    if (ec)
                    {
                        SPDLOG_ERROR("Error on receive for client: {} with error: {}", get_alias(), ec.message());
                        this->m_callback_thread_pool.push(
                        [this, buffer_cpy, ec, bytes_transferred]()
                        {
                            this->m_on_receive_error(*this, *buffer_cpy, ec, bytes_transferred);
                        });
                        switch (ec.value())
                        {
                        case boost::asio::error::eof:
                        case boost::asio::error::connection_reset:
                        case boost::asio::error::connection_aborted:
                        case boost::asio::error::operation_aborted:
                        case boost::asio::error::broken_pipe:
                        case boost::asio::error::not_connected:
                        case boost::asio::error::bad_descriptor:
                        case boost::asio::error::fault:
                        case boost::asio::error::host_not_found:
                        // case boost::asio::error::host_not_found_try_again: == ::eof
                        case boost::asio::error::host_unreachable:
                        case boost::asio::error::network_down:
                        case boost::asio::error::network_reset:
                        case boost::asio::error::network_unreachable:
                        case boost::asio::error::no_recovery:
                            SPDLOG_ERROR("Client cannot connect: {} stopping reading due to {}, stopping read, considered not healthy!", get_alias(), ec.message());
                            m_healthy = false;
                        default:
                            break;
                        }
                    }
                    else
                    {
                        SPDLOG_INFO("Received {} bytes for client: {}", bytes_transferred, get_alias());
                        m_callback_thread_pool.push(
                        [this, buffer_cpy, bytes_transferred]()
                        {
                            this->m_on_receive(*this, *buffer_cpy, bytes_transferred);
                        });
                    }

                    if (!healthy())
                    {
                        SPDLOG_INFO("Client not healthy: {} stopping reading", get_alias());
                        return;
                    }

                    _start_reading();
                }
            );
        }

        base_client_unwrapped()
        {
            SPDLOG_INFO("Creating base_client_unwrapped: {}", get_alias());

            set_on_connect([](base_abstract_client_unwrapped& client) {
                SPDLOG_INFO("Default callback on_connect for client: {}", client.get_alias());
            });

            set_on_connect_error([](base_abstract_client_unwrapped& client, const boost::system::error_code &ec) {
                SPDLOG_ERROR("Default callback on_connect_error for client: {} with error: {}", client.get_alias(), ec.message());
            });

            set_on_disconnect([](base_abstract_client_unwrapped& client) {
                SPDLOG_INFO("Default callback on_disconnect for client: {}", client.get_alias());
            });

            set_on_receive([](base_abstract_client_unwrapped& client, const buffer_t &, const size_t &bytes_transferred) {
                SPDLOG_INFO("Default callback on_receive for client: {} with {} bytes", client.get_alias(), bytes_transferred);
            });

            set_on_receive_error([](base_abstract_client_unwrapped& client, const buffer_t &, const boost::system::error_code &ec, const size_t &bytes_transferred) {
                SPDLOG_ERROR("Default callback on_receive_error for client: {} error: {} bytes: {}", client.get_alias(), ec.message(), bytes_transferred);
            });

            set_on_send([](base_abstract_client_unwrapped& client, const buffer_t &, const size_t &size) {
                SPDLOG_INFO("Default callback on_send for client: {} bytes: {}, allowing by default send", client.get_alias(), size);
                return true;
            });

            set_on_send_error([](base_abstract_client_unwrapped& client, const buffer_t &, const boost::system::error_code &ec, const size_t& bytes_transferred) {
                SPDLOG_ERROR("Default callback on_send_error for client: {} error: {} bytes: {}", client.get_alias(), ec.message(), bytes_transferred);
            });

            set_on_send_success([](base_abstract_client_unwrapped& client, const buffer_t &, const size_t& bytes_transferred) {
                SPDLOG_INFO("Default on_send_success for client: {} with {} bytes", client.get_alias(), bytes_transferred);
            });

            SPDLOG_INFO("Created base_client_unwrapped: {}", get_alias());
        }

    public:

        static shared_t make()
        {
            return std::shared_ptr<base_client_unwrapped>(new base_client_unwrapped());
        }

        virtual ~base_client_unwrapped() override
        {
            SPDLOG_INFO("Destroying base_client_unwrapped: {}", get_alias());
            disconnect();
            SPDLOG_INFO("Destroyed base_client_unwrapped: {}", get_alias());
        }

        virtual bool connect(const std::string &host, const std::string &port) override final
        {
            SPDLOG_INFO("Connecting client: {} to {}:{}", get_alias(), host, port);

            if (m_connected)
            {
                SPDLOG_ERROR("Client already connected: {}", get_alias());
                return false;
            }

            m_connection_data = std::unique_ptr<connection_data>(new connection_data(host, port));

            boost::system::error_code error = boost::asio::error::host_not_found;
            boost::asio::ip::tcp::resolver::iterator end;

            while (error && m_connection_data->m_endpoint_iterator != end)
            {
                m_connection_data->m_socket.close();
                m_connection_data->m_socket.connect(*m_connection_data->m_endpoint_iterator++, error);
            }

            if (error)
            {
                SPDLOG_ERROR("Error connecting client: {} with error: {}", get_alias(), error.message());
                m_on_connect_error(*this, error);
                m_callback_thread_pool.push(
                [this, error]()
                {
                    this->m_on_connect_error(*this, error);
                });
                m_callback_thread_pool.stop();
                return false;
            }

            m_connected = true;
            m_healthy = true;

            m_connection_data->m_io_service_thread = std::thread(
            [this]()
            {
                SPDLOG_WARN("Starting io_service thread for client: {}", get_alias());
                while (true) {
                    this->m_connection_data->m_io_service.run();
                    if (healthy()) {
                        this->m_connection_data->m_io_service.reset();
                    } else {
                        break;
                    }
                }
                SPDLOG_WARN("Stopping io_service thread for client: {}", get_alias());
            });

            m_callback_thread_pool.push(
            [this]()
            {
                this->m_on_connect(*this);
            });

            SPDLOG_INFO("Connected client: {}", get_alias());

            this->_start_reading();
            return true;
        }

        virtual bool disconnect() override final
        {
            SPDLOG_INFO("Disconnecting client: {}", get_alias());

            if (!m_connected)
            {
                SPDLOG_WARN("Client already disconnected: {}", get_alias());
                return false;
            }

            auto client = this->as_shared();

            m_connected = false;
            m_healthy = false;
            m_connection_data->m_socket.close();
            m_connection_data->m_io_service.stop();
            m_connection_data->m_io_service_thread.join();
            m_connection_data = nullptr;

            m_callback_thread_pool.push(
            [this]()
            {
                this->m_on_disconnect(*this);
            });

            SPDLOG_INFO("Disconnected client: {}", get_alias());

            m_callback_thread_pool.stop();

            return true;
        }

        virtual bool send(shared_buffer_t &buffer, const size_t &size) override final
        {
            SPDLOG_INFO("Sending {} bytes for client: {}", size, get_alias());

            if (!healthy())
            {
                SPDLOG_ERROR("Cannot send data to from a non-healthy client: {}", get_alias());
                return false;
            }

            if (!this->m_on_send(*this, *buffer, size))
            {
                SPDLOG_ERROR("Error on send for client: {} with error: {}", get_alias(), "on_send returned false");
                m_callback_thread_pool.push(
                [this, buffer]()
                {
                    const static auto ec = boost::system::errc::make_error_code(boost::system::errc::operation_canceled);
                    this->m_on_send_error(*this, *buffer, ec, 0);
                });
            }

            auto client = this->as_shared();
            const auto asio_send_callback = 
            [this, client, buffer](const boost::system::error_code &ec, size_t bytes_transferred)
            {
                if (ec)
                {
                    SPDLOG_ERROR("Error on send for client: {} with error: {} and {} bytes", get_alias(), ec.message(), bytes_transferred);
                    m_callback_thread_pool.push(
                    [this, buffer, ec, bytes_transferred]()
                    {
                        this->m_on_send_error(*this, *buffer, ec, bytes_transferred);
                    });

                    switch (ec.value())
                    {
                    case boost::asio::error::eof:
                    case boost::asio::error::connection_reset:
                    case boost::asio::error::connection_aborted:
                    case boost::asio::error::operation_aborted:
                    case boost::asio::error::broken_pipe:
                    case boost::asio::error::not_connected:
                    case boost::asio::error::bad_descriptor:
                    case boost::asio::error::fault:
                    case boost::asio::error::host_not_found:
                    // case boost::asio::error::host_not_found_try_again: == ::eof
                    case boost::asio::error::host_unreachable:
                    case boost::asio::error::network_down:
                    case boost::asio::error::network_reset:
                    case boost::asio::error::network_unreachable:
                    case boost::asio::error::no_recovery:
                        SPDLOG_ERROR("Client cannot send data: {} due to {}, stopping send, considered not healthy!", get_alias(), ec.message());
                        m_healthy = false;
                    default:
                        break;
                    }
                }
                else
                {
                    SPDLOG_INFO("Sent {} bytes for client: {}", bytes_transferred, get_alias());
                    m_callback_thread_pool.push(
                    [this, buffer, bytes_transferred]()
                    {
                        this->m_on_send_success(*this, *buffer, bytes_transferred);
                    });
                }
            };

            SPDLOG_INFO("Sending {} bytes for client: {}", size, get_alias());
            m_connection_data->m_socket.async_send(
                boost::asio::buffer(*buffer, size),
                asio_send_callback
            );

            return true;
        }

        
    };

    using tcp_client_unwrapped = base_client_unwrapped<boost::asio::ip::tcp>;
    using udp_client_unwrapped = base_client_unwrapped<boost::asio::ip::udp>;

    template<class Protocol>
    class client_wrapper
    {
    private:
        typename Protocol::shared_t m_shared_client;
        Protocol &m_client;

    public:


        class Error : public hl::net::Error
        {
        public:
            Error(const std::string &error)
                : hl::net::Error(error)
            {}
        };

        explicit client_wrapper()
            : m_shared_client(Protocol::make())
            , m_client(*m_shared_client)
        {
            SPDLOG_INFO("Creating client wrapper for: {}", get_alias());
        }

        ~client_wrapper()
        {
            SPDLOG_INFO("Destroying client wrapper for client: {}", get_alias());
            if (connected()) {
                disconnect();
            }
            SPDLOG_INFO("Destroyed client wrapper for client: {}", get_alias());
        }

        // API Reproduction

        const std::string get_alias() const
        {
            return m_client.get_alias();
        }

        void set_alias(const std::string &alias)
        {
            m_client.set_alias(alias);
        }

        void set_on_connect(const client_on_connect_callback &callback)
        {
            m_client.set_on_connect(callback);
        }

        void set_on_connect_error(const client_on_connect_error_callback &callback)
        {
            m_client.set_on_connect_error(callback);
        }

        void set_on_disconnect(const client_on_disconnect_callback &callback)
        {
            m_client.set_on_disconnect(callback);
        }

        void set_on_receive(const client_on_receive_callback &callback)
        {
            m_client.set_on_receive(callback);
        }

        void set_on_receive_error(const client_on_receive_error_callback &callback)
        {
            m_client.set_on_receive_error(callback);
        }

        void set_on_send(const client_on_send_callback &callback)
        {
            m_client.set_on_send(callback);
        }

        void set_on_send_error(const client_on_send_error_callback &callback)
        {
            m_client.set_on_send_error(callback);
        }

        void set_on_send_success(const client_on_send_success_callback &callback)
        {
            m_client.set_on_send_success(callback);
        }

        bool connected() const
        {
            return m_client.connected();
        }

        bool healthy() const
        {
            return m_client.healthy();
        }

        shared_buffer_t &receive_buffer()
        {
            return m_client.receive_buffer();
        }

        const shared_buffer_t &receive_buffer() const
        {
            return m_client.receive_buffer();
        }

        bool callbacks_are_non_null()
        {
            return m_client.callbacks_are_non_null();
        }

        bool connect(const std::string &host, const std::string &port, bool auto_alias = true)
        {
            if (auto_alias) {
                set_alias(fmt::format("client({}, {}:{})", static_cast<void*>(this), host, port));
            }
            return m_client.connect(host, port);
        }

        bool disconnect()
        {
            return m_client.disconnect();
        }

        bool send(shared_buffer_t &buffer, const size_t &size)
        {
            return m_client.send(buffer, size);
        }

        bool send(shared_buffer_t &buffer)
        {
            return m_client.send(buffer);
        }

        bool send_bytes(const void *data, const size_t &size)
        {
            return m_client.send_bytes(data, size);
        }

        bool send_string(const std::string &str)
        {
            return m_client.send_string(str);
        }

        template<typename T>
        bool send_vec(const std::vector<T> &data)
        {
            return m_client.send_vec(data);
        }

        template<typename T>
        bool send_vec(const std::vector<T> &data, const size_t& size)
        {
            return m_client.send_vec(data, size);
        }

        typename Protocol::shared_t client_as_shared()
        {
            return m_shared_client;
        }

        const typename Protocol::shared_t client_as_shared() const
        {
            return m_shared_client;
        }

        operator bool() const
        {
            return healthy();
        }
    };

    using tcp_client = client_wrapper<tcp_client_unwrapped>;
    using udp_client = client_wrapper<udp_client_unwrapped>;
}
}
